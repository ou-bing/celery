.. _celery-installation:

安装
============

您可以使用 Python Package Index（PyPI）或从源代码安装 Celery。

使用 pip 进行安装：


.. code-block:: console

    $ pip install -U Celery

.. _bundles:

捆绑包
-------

Celery 还定义了一组捆绑包，可以用来安装 Celery 和指定特性的依赖项。

你可以在你的 requirements 中指定它们，也可以在 :command:`pip` 名上使用括号，多个捆绑包可以使用 , 分割来指定。

.. code-block:: console

    $ pip install "celery[librabbitmq]"

    $ pip install "celery[librabbitmq,redis,auth,msgpack]"

以下捆绑包是可用的:

序列化器
~~~~~~~~~~~

:``celery[auth]``:
    for using the ``auth`` security serializer.

:``celery[msgpack]``:
    for using the msgpack serializer.

:``celery[yaml]``:
    for using the yaml serializer.

并发
~~~~~~~~~~~

:``celery[eventlet]``:
    for using the :pypi:`eventlet` pool.

:``celery[gevent]``:
    for using the :pypi:`gevent` pool.

传输模块和后端
~~~~~~~~~~~~~~~~~~~~~~~

:``celery[librabbitmq]``:
    for using the librabbitmq C library.

:``celery[redis]``:
    for using Redis as a message transport or as a result backend.

:``celery[sqs]``:
    for using Amazon SQS as a message transport (*experimental*).

:``celery[tblib]``:
    for using the :setting:`task_remote_tracebacks` feature.

:``celery[memcache]``:
    for using Memcached as a result backend (using :pypi:`pylibmc`)

:``celery[pymemcache]``:
    for using Memcached as a result backend (pure-Python implementation).

:``celery[cassandra]``:
    for using Apache Cassandra/Astra DB as a result backend with DataStax driver.

:``celery[couchbase]``:
    for using Couchbase as a result backend.

:``celery[arangodb]``:
    for using ArangoDB as a result backend.

:``celery[elasticsearch]``:
    for using Elasticsearch as a result backend.

:``celery[riak]``:
    for using Riak as a result backend.

:``celery[dynamodb]``:
    for using AWS DynamoDB as a result backend.

:``celery[zookeeper]``:
    for using Zookeeper as a message transport.

:``celery[sqlalchemy]``:
    for using SQLAlchemy as a result backend (*supported*).

:``celery[pyro]``:
    for using the Pyro4 message transport (*experimental*).

:``celery[slmq]``:
    for using the SoftLayer Message Queue transport (*experimental*).

:``celery[consul]``:
    for using the Consul.io Key/Value store as a message transport or result backend (*experimental*).

:``celery[django]``:
    specifies the lowest version possible for Django support.

    You should probably not use this in your requirements, it's here
    for informational purposes only.


.. _celery-installing-from-source:

下载源代码并安装
--------------------------------------

从 PyPI 下载最新版本的 Celery：

https://pypi.org/project/celery/

您可以通过执行以下操作来进行安装：


.. code-block:: console

    $ tar xvfz celery-0.0.0.tar.gz
    $ cd celery-0.0.0
    $ python setup.py build
    # python setup.py install

如果您当前没有使用 virtualenv，则最后一个命令必须以 root 用户身份执行。

.. _celery-installing-from-git:

使用开发版本
-----------------------------

使用 pip
~~~~~~~~

Celery 的开发版本也需要 :pypi:`kombu`、:pypi:`amqp`、:pypi:`billiard` 和 pypi:`vine` 的开发版本。

您可以使用以下 pip 命令安装它们的最新快照：


.. code-block:: console

    $ pip install https://github.com/celery/celery/zipball/main#egg=celery
    $ pip install https://github.com/celery/billiard/zipball/main#egg=billiard
    $ pip install https://github.com/celery/py-amqp/zipball/main#egg=amqp
    $ pip install https://github.com/celery/kombu/zipball/main#egg=kombu
    $ pip install https://github.com/celery/vine/zipball/main#egg=vine

使用 git
~~~~~~~~

请参考 :ref:`Contributing <contributing>` 部分。
